<project name="Constellation" default="build" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="version" value="0.7.0" />
	<property name="jar" value="constellation-${version}.jar" />
	<property name="zip" value="constellation-${version}.zip" />
	<property name="src-zip" value="constellation-${version}-src.zip" />

	<property name="distdir" value="./lib" />
	<property name="javadoc" value="javadoc" />

  	<property name="main.build.dir" value="./build/main"/>
  	<property name="main.src.dir" value="./src/main/java"/>
  	<property name="test.build.dir" value="./build/test"/>
  	<property name="test.src.dir" value="./src/test/java"/>

        <property name="result.dir" location="./target" />
        <property name="result.classes.dir" location="${result.dir}/classes" />
        <property name="result.report.dir" location="${result.dir}/site/jacoco" />
        <property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<path id="default.classpath">
		<fileset dir="external">
			<include name="*.jar" />
		</fileset>
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<fileset dir="external">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

        <!-- Step 1: Import JaCoCo Ant tasks -->
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
                <classpath path="./external/test/jacoco/lib/jacocoant.jar" />
        </taskdef>
        
	<!-- Compile constellation -->
	<target name="compile">
		<mkdir dir="${distdir}" />
		<mkdir dir="${main.build.dir}" />

		<javac destdir="${main.build.dir}" srcdir="${main.src.dir}" source="1.7" target="1.7" debug="true" 
                                        includeantruntime="false" includes="**/*.java" classpathref="default.classpath" />

		<jar jarfile="${distdir}/${jar}" basedir="${main.build.dir}" includes="**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
	</target>

	<target name="test-compile" depends="compile">
		<mkdir dir="${test.build.dir}" />
		<mkdir dir="${result.classes.dir}" />
		<mkdir dir="${result.report.dir}" />

		<javac destdir="${test.build.dir}" srcdir="${test.src.dir}" source="1.7" target="1.7" debug="true" includeantruntime="false" includes="**/*.java">
        		<classpath>
          			<pathelement location="${distdir}/${jar}"/>
                                <path refid="test.classpath"/>
        		</classpath>
		</javac>
	</target>


        <target name="copy-external">
	        <mkdir dir="lib" />
        	<!-- Copy external libraries to lib directory -->
	        <copy todir="lib">
		        <fileset dir="external" excludes="log4jME*.jar" />
		</copy>
	</target>

	<target name="javadoc" description="Create javadocs">
		<!-- Create the javadoc -->
		<mkdir dir="${javadoc}" />
		<javadoc destdir="${javadoc}" access="public" sourcepath="src" windowtitle="Constellation Documentation" packagenames="ibis.constellation, ibis.constellation.context" doctitle="Constellation Documentation" bottom="The Ibis project" classpathref="default.classpath">
		    <link href="http://docs.oracle.com/javase/6/docs/api/"/>
		</javadoc>

	</target>

	<target name="build" depends="clean,compile,copy-external">
	</target>

 	<target name="test" depends="test-compile">
                <jacoco:coverage destfile="${result.exec.file}">
    			<junit printsummary="on" haltonfailure="yes" fork="true">
        			<classpath>
          				<path refid="test.classpath"/>
          				<pathelement location="${test.build.dir}"/>
        			</classpath>
        			<formatter type="brief" usefile="false" />
        			<batchtest>
            				<fileset dir="${test.src.dir}" includes="**/*Test.java" />
        			</batchtest>
    			</junit>
                </jacoco:coverage>

                <jacoco:report>

                        <!-- This task needs the collected execution data and ... -->
                        <executiondata>
                                <file file="${result.exec.file}" />
                        </executiondata>

                        <!-- the class files and optional source files ... -->
                        <structure name="Constellation Test Coverage">
                                <classfiles>
                                        <fileset dir="${main.build.dir}" />
                                </classfiles>
                                <sourcefiles encoding="UTF-8">
                                        <fileset dir="${main.src.dir}" />
                                </sourcefiles>
                        </structure>

                        <!-- to produce reports in different formats. -->
                        <html destdir="${result.report.dir}" />
                        <csv destfile="${result.report.dir}/report.csv" />
                        <xml destfile="${result.report.dir}/report.xml" />
                </jacoco:report>
        </target>

	<target name="bin.zip" depends="build">
		<delete failonerror="false" file="${zip}" />

		<zip destfile="${zip}">
			<zipfileset dir="." prefix="constellation-${version}" includes="external/**,jars/**,*.properties,*.example,notices/**,README.txt,INSTALL.txt,LICENSE.txt,javadoc/**" />
			<zipfileset dir="." prefix="constellation-${version}" filemode="755" includes="bin/**" />
		</zip>
	</target>

	<target name="src.zip" depends="build">
		<delete failonerror="false" file="${src-zip}" />

		<zip destfile="${src-zip}">
			<zipfileset dir="." prefix="constellation-${version}" includes="src/**,external/**,jars/**,*.properties,*.example,notices/**,README.txt,INSTALL.txt,LICENSE.txt,javadoc/**,build.xml" />
			<zipfileset dir="." prefix="constellation-${version}" filemode="755" includes="bin/**" />
		</zip>
	</target>


	<!-- remove all generated code -->
	<target name="clean" description="Removes the ${distdir} directory">
		<delete failonerror="false" dir="${builddir}" />
		<delete failonerror="false" dir="${distdir}" />
		<delete failonerror="false" dir="${javadoc}" />
		<delete failonerror="false" dir="${result.dir}" />
	</target>

	<target name="distclean" depends="clean">
		<delete failonerror="false" dir="./build-eclipse" />
		<delete failonerror="false" file="${zip}" />
		<delete failonerror="false" file="${src-zip}" />
	</target>


</project>
